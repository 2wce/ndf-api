  type Member {
    createdAt: String
    id: ID!
    updatedAt: String

    # enums
    type: MemberType

    # relationships
    membership: Membership

    # scalars
    companyName: String
    email: String!
    jobTitle: String
    name: String
    phoneNumber: String
    profilePicture: String
  }

  type AddMemberResponse implements Response {
    member: Member
    success: Boolean
    error: Error
  }

  type UpdateMemberResponse implements Response {
    member: Member
    success: Boolean
    error: Error
  }

  # Add member response
  type AddMembershipResponse implements Response {
    membership: Membership
    success: Boolean
    error: Error
  }

  # Enums
  enum MemberType {
    INDIVIDUAL
    INSTITUTIONAL
  }

  # Inputs
  input AddMemberInput {
    companyName: String!
    email: String!
    jobTitle: String!
    levelId: ID!
    name: String!
    phoneNumber: String!
    type: MemberType!
  }

  input AddMembershipInput {
    userId: ID!
    levelId: ID!
    type: MemberType!
  }

  input UpdateMemberInput {
    memberId: ID!
    levelId: ID!
    type: MemberType!
  }

  # Queries
  type Query {
    member(id: ID!): Member
    members: [Member]
  }

  # Mutations
  type Mutation {
    addMember(input: AddMemberInput!): AddMemberResponse
    updateMember(input: UpdateMemberInput!): UpdateMemberResponse
    addMembership(input: AddMembershipInput!): AddMembershipResponse
  }
